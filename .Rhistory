getwd
getwd()
setwd("/home/evezeyl/Dropbox/GITS/R_WGAS")
ls()
library(ape)
library(pacman)
p_function(ape)
p_function("ape")
?pacman
p_functions("ape")
library(treeWAS)
read.fasta("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata")
read.FASTA("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata", as.character=T)
read.dna("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata", as.character=T)
read.FASTA("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata",type = "DNA")
read.dna("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata/test.fasta", as.character=T)
read.FASTA("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata/test.fasta", as.character=T)
read.dna("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata/test.fasta",
format= "fasta",
as.character=T,
as.matrix = NULL)
testdata<- read.dna("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata/test.fasta",
format= "fasta",
as.character=T,
as.matrix = NULL)
class(testdata)
testdata<- read.dna("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata/test.fasta",
format= "fasta",
as.character=T,
as.matrix = FALSE)
class(testdata)
testdata
testdata<- read.dna("/home/evezeyl/Dropbox/GITS/R_WGAS/testdata/test.fasta",
format= "fasta",
as.character=T,
as.matrix = NULL) # FALSE for list
testdata
class(testdata)
#convertion to DNAbin
dnabin <- DNAbin2genind(testdata)
#
fasta_file = "/home/evezeyl/Dropbox/GITS/R_WGAS/testdata/test.fasta"
fasta_file = "/home/evezeyl/Dropbox/GITS/R_WGAS/testdata/test.fasta"
test_char<- read.dna(fasta_file,
format= "fasta",
as.character=T,
as.matrix = NULL) # FALSE for list
test_dna <- read.dna(fasta_file)
test_char
test_dna
test_dna <- read.dna(fasta_file)
test_dna
test_dna <- read.dna(fasta_file, format = "fasta")
test_dna
test_char
test_dna
test_dna$cat
test_dna@cat
str(test_dna)
View(test_dna)
test_dna$cat_CD9
?read.dna
class(test_dna)
?DNAbin
testdata
test_dna
as.matrix(test_dna)
View(as.matrix(test_dna))
names(test_dna)
attributes(test_dna)
str(test_char)
#convertion to DNAbin
dnabin <- DNAbin2genind(testdata)
#convertion to DNAbin
dnabin <- DNAbin2genind(testdata)@tab
#convertion to DNAbin
dnabin <- DNAbin2genind(testdata)@tab
#convertion to DNAbin
dnabin <- DNAbin2genind(testdata)@cat_CD9
#convertion to DNAbin
dnabin <- DNAbin2genind(test_dna)@tab
View(dnabin)
test_dnabin <- read.dna(fasta_file, format = "fasta")
#convertion to DNAbin
dnabin_mat <- DNAbin2genind(test_dna)@tab # conversion to matrix of dnabin object
dnabin_mat
test_char
dnabin_mat
test_char
fasta_gapfile = "/home/evezeyl/Dropbox/GITS/R_WGAS/testdata/test_gap.fasta"
#same for gap just to see coding
gap_dnabin <- read.dna(fasta_gapfile, as.character = F, format = "fasta")
gap_mat <- DNAbin2genind(gap_dnabin)@tab
gap_dnabin
gap_char <- read.dna(ffasta_gapfile, format= "fasta",as.character=T)
gap_dnabin <- read.dna(fasta_gapfile, as.character = F, format = "fasta")
gap_mat <- DNAbin2genind(gap_dnabin)@tab
#same for gap just to see coding
gap_char <- read.dna(fasta_gapfile, format= "fasta",as.character=T)
gap_dnabin <- read.dna(fasta_gapfile, as.character = F, format = "fasta")
gap_mat <- DNAbin2genind(gap_dnabin)@tab
gap_char
gap_mat
gap_char <- read.dna(fasta_gapfile, format= "fasta",as.character=T)
gap_dnabin <- read.dna(fasta_gapfile, as.character = F, format = "fasta")
gap_mat <- DNAbin2genind(gap_dnabin)@tab
gap_mat
gap_char
gap_char <- read.dna(fasta_gapfile, format= "fasta",as.character=T)
gap_dnabin <- read.dna(fasta_gapfile, as.character = F, format = "fasta")
gap_mat <- DNAbin2genind(gap_dnabin)@tab
gap_mat
gap_char
class gap_mat
class (gap_mat)
names(gap_mat)
str(gap_mat)
colnames(gap_mat)
rownames(gap_mat)
# Making phenotypic data
phenotypic <- matrix (data = NA, ncol = 3, nrow = 4)
phenotypic
# Making phenotypic data
phenotypic <- matrix (ncol = 3, nrow = 4)
phenotypic
col.names(phenotypic) <- c("friendly", "twoleggs", "fluffy")
str(phenotypic)
# Making phenotypic data
phenotypic <- matrix (data = 1, ncol = 3, nrow = 4)
class(phenotypic)
str(phenotypic)
attributes(phenotypic)
colnames(phenotypic)
col.names(phenotypic) <- c("friendly", "twoleggs", "fluffy")
phenotypic$colnames <- c("friendly", "twoleggs", "fluffy")
phenotypic
phenotypic <- matrix (data = 1, ncol = 3, nrow = 4)
colnames(phenotypic) <- c("friendly", "twoleggs", "fluffy")
phenotypic
rownames(gap_mat)
rownames(phenotypic) <- rownames(gap_mat)
phenotypic
# changing some values
phenotypic$friendly[2:4]
# changing some values
phenotypic$friendly
# changing some values
phenotypic$friendly
names(phenotypic)
phenotypic
col.names(phenotypic)
class(phenotypic)
row.names(gap_mat)
phenotypic <- matrix (data = 1, ncol = 3, nrow = 4)
col.names(phenotypic) <- c("friendly", "twoleggs", "fluffy")
row.names(phenotypic) <- row.names(gap_mat)
phenotypic <- matrix (data = 1, ncol = 3, nrow = 4)
colnames(phenotypic) <- c("friendly", "twoleggs", "fluffy")
rownames(phenotypic) <- rownames(gap_mat)
# changing some values
names(phenotypic)
View(phenotypic)
phenotypic$friendly
phenotypic@friendly
names(friendly)
names(phenotypic)
str(phenotypic)
phenotypic$friendly
phenotypic[,"friendly"]
# changing some values
phenotypic[3:4,"friendly"]
# changing some values
phenotypic[3:4,"friendly"] <- c(0.5, 0)
phenotypic
phenotypic["human_CD9","twolegs"]
phenotypic[3,"twolegs"]
colnames(phenotypic) <- c("friendly", "twolegs", "fluffy")
rownames(phenotypic) <- rownames(gap_mat)
# changing some values
phenotypic[3:4,"friendly"] <- c(0.5, 0)
phenotypic["human_CD9","twolegs"]
phenotypic["human_CD9","twolegs"]
phenotypic[!"human_CD9","twolegs"]
phenotypic[!("human_CD9"),"twolegs"]
phenotypic[!="human_CD9","twolegs"]
phenotypic[!=("human_CD9"),"twolegs"]
phenotypic["human_CD9","twolegs"]
phenotypic[! "human_CD9","twolegs"]
phenotypic[! 3,"twolegs"]
phenotypic[!3,"twolegs"]
phenotypic[,"twolegs"]
phenotypic[,"twolegs"] <-c(0,0,1,0)
phenotypic
phenotypic["human_CD9", "fluffy"]
phenotypic["human_CD9", "fluffy"] <- 0
phenotypic
phenotypic[3:4,"friendly"] <- c(0.7, 1,0.5, 0)
phenotypic[,"twolegs"] <-c(0,0,1,0)
phenotypic["human_CD9", "fluffy"] <- 0
phenotypic
# changing some values
phenotypic[c(1,3:4),"friendly"] <- c(0.7,0.5, 0)
phenotypic
# changing some values
phenotypic[c(1,3:4),"friendly"] <- c(0.9,0.5, 0)
phenotypic
#we can make a simple maxi parsimony tree
library(phangorn)
#? library (seqinr)
# convert to phyDat for use in phangorn # generates alignement all site patterns
test_phyDat <- phyDat(test_dnabin, type = DNA)
test_phyDat
# NJ tree
NJ(test_phyDat)
# NJ tree
test_dist<- dist.ml(test_phyData, model = "F81")
#? library (seqinr)
# convert to phyDat for use in phangorn # generates alignement all site patterns
test_phyDat <- phyDat(test_dnabin, type = DNA)
# NJ tree
test_dist<- dist.ml(test_phyData, model = "F81")
# NJ tree
test_dist<- dist.ml(test_phyDat, model = "F81")
test_NJ<- NJ(test_dist)
plot(test_NJ, main = "NJ")
test_treeRatchet <- pratchet (test_phyDat, trace = 0)
test_treeRatchet
plot(test_treeRatchet)
class(test_treeRatchet)
parsimony(test_treeRatchet)
parsimony(test_treeRatchet, test_phyDat)
# ML of the tree
test_fit <- pml(tree_Ratchet, data = test_phyDat)
# ML of the tree
test_fit <- pml(test_treeRatchet, data = test_phyDat)
# ML of the tree
test_fit <- pml(test_treeRatchet, data = test_phyDat, optBf = T, optQ = T, optGamma = T)
test_fit <- pml(test_NJ, data = test_phyDat, optBf = T, optQ = T, optGamma = T)
test_fit
?dist.ml
# NJ tree
test_dist<- dist.dna(test_phyDat, model = "GG95") #GC content may change true time
test_dist
# NJ tree
test_dist<- dist.dna(test_phyDat, model = "F81") #GG95 GC content may change true time
test_dist<- dist.dna(test_phyDat, model = "F81")
test_phyDat
str(test_phyDat)
class(test_phyDat)
mode(test_phyDat)
??DNAbin2genind
test_phyDat_DNAbin <- DNAbin2genind(test_phyDat)
test_phyDat_DNAbin <- DNAbin2genind(test_phyDat) # conversion to DNAbin format
# NJ tree
test_dist<- dist.dna(test_phyDat_DNAbin, model = "F81") #GG95 GC content may change true time # dist.dna requires DNAbin format
test_phyDat_DNAbin <- DNAbin2genind(test_phyDat) # conversion to DNAbin format
test_phyDat <- phyDat(test_dnabin, type = DNA)
test_phyDat_DNAbin <- DNAbin2genind(test_phyDat) # conversion to DNAbin format
test_phyDat_DNAbin <- alignment2genind((test_phyDat) # conversion to DNAbin format
)
test_phyDat_DNAbin <- alignment2genind(test_phyDat) # conversion to DNAbin format
test_phyDat_DNAbin <- as.DNAbin(test_phyDat) # conversion to DNAbin format
class(test_phyDat_DNAbin)
str(test_phyDat_DNAbin)
names(test_phyDat_DNAbin)
rownames(test_phyDat_DNAbin)
test_phyDat_DNAbin[[1]]
test_phyDat_DNAbin[1]
test_phyDat_DNAbin[1,]
test_dist<- dist.dna(test_phyDat_DNAbin, model = "F81")
test_dist
test_NJ<- NJ(test_dist)
plot(test_NJ, main = "NJ")
alignement <- read.dna(fasta_file, as.character = F, format = "fasta")
Align_phyDat <- phyDat(alignement, type = DNA)
align_phyDat <- phyDat(alignement, type = DNA)
align_DNAbin <- as.DNAbin(align_phyDat) # conversion to DNAbin format
# NJ tree
distance_matrix<- dist.dna(align_DNAbin, model = "F81") #GG95 GC content may change true time # dist.dna requires DNAbin format
distance_matrix
align_DNAbin
align_DNAbin@tabl
align_DNAbin@tab
aling_phyDat
align_phyDat
as.MultipleAlignment(align_phyDat)
as.character(align_phyDat)
as.DNAbin(align_phyDat)
as.DNAbin(align_phyDat)@tab
as.data.frame(align_phyDat)
DNAbin2genind(align_DNAbin)@tab
?transpose
?t
t(as.character(align_phyDat))
as.character(align_phyDat)
DNAbin2genind(align_DNAbin)@tab
??phyDat
as.data.frame(align_phyDat)
t(as.data.frame(align_phyDat))
distance_matrix<- dist.dna(align_DNAbin, model = "F81")
distance
distance_matrix
# NJ tree
test_NJ<- NJ(distance_matrix)
plot(test_NJ, main = "NJ")
# UPGMA
test_UPGMA <- upgma(distance_matrix)
plot(test_UPGMA, main = "UPGMA")
par(mfrow = c(1,2))
plot(test_UPGMA, main = "UPGMA")
plot(test_NJ, main = "NJ")
